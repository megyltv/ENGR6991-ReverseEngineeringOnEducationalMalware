#Author: Megan Toinga
#Script based on: https://github.com/ajay-devjani/projects/blob/main/Reverse_Engineering_on_Educational_Malware/dynamic_csv_txt.py
import logging
import os

import pandas as pd


# Function definition to create input dataset from logs(CSVs) generated by Cuckoo Sandbox.
# Generated dataset is provided as input to all classifiers.
# Input: size: Specifies size of n-gram.
# Output: "training_dynamic_<<n-gram size>>_gram.txt" in "training" folder.

def csv_to_txt_multiple_class(path, size=3,label='0'):
    n_gram = []
    cwd = os.getcwd()
    i_path = os.path.join(cwd, path)
    print('Inside:',i_path)
    
    for filename in os.listdir(i_path):
        func_list = []
        data_frame = pd.read_csv(os.path.join(i_path, filename)).dropna()
        for index, row in data_frame.iterrows():
            func_list.append(row["api"])
        line = ''
        
        if len(func_list) < size:
            for i in range(size - len(func_list)):
                line = line + "|__NaN__"
            n_gram.append(''.join(line).strip() + ",0")
            continue
        
        api_calls = ''
        # Creating n-grams according to size. All API calls are separated by bar("|").
        for i in range(len(func_list)):
            if i == len(func_list) - size + 1:
                break
            for k in range(size - 1):
                api_calls = api_calls + func_list[i + k] + "|"
            
            api_calls = api_calls + func_list[i + k + 1] + ","
            n_gram.append(api_calls + label)
            api_calls = ''
            
    return n_gram

def create_txt_ngram_file(n_gram,size=3):
    try:
        with open("./processing/training/training_multiple_" + str(size) + "_gram.txt", "w+", encoding="utf-8") as n_gram_writer:
            for line in n_gram:
                n_gram_writer.write(str(line) + '\n')
        n_gram_writer.close()
        print("Writing in training_multiple_" + str(size) + "_gram.txt successful..")
        logging.info("Writing in training_multiple_" + str(size) + "_gram.txt successful..")
    except Exception as ex:
        print("Error in writing training file." + str(ex))
        logging.error("Error in writing training file." + str(ex))

size_ngram = 10

b_n_gram = csv_to_txt_multiple_class("processing\\b_calls",size=size_ngram,label='0')
ransom_n_gram = csv_to_txt_multiple_class("ENGR6991-ReverseEngineeringOnEducationalMalware\\system_calls\\malicious_ransomware_calls",size=size_ngram,label='1')
crypto_n_gram = csv_to_txt_multiple_class("ENGR6991-ReverseEngineeringOnEducationalMalware\\system_calls\\malicious_cryptominer_calls",size=size_ngram,label='2')

n_gram = b_n_gram + ransom_n_gram + crypto_n_gram
create_txt_ngram_file(n_gram,size=size_ngram)