#Author: Megan Toinga

from sequential.seq2pat import Seq2Pat, Attribute
import pandas as pd
from datetime import datetime

def get_sequence_with_less_frequence(type='none', min_frequency=2, frequency_type="most"):
    system_calls,indexes = read_api_calls_from_file(type)
    
    sequences_pattterns = Seq2Pat(sequences=system_calls)
    index_attribute = Attribute(values=indexes)
    sequences_pattterns.add_constraint(0 <= index_attribute.gap() <= 1)

    patterns_frequency = sequences_pattterns.get_patterns(min_frequency=min_frequency)
    
    if len(patterns_frequency) == 0:
        return []

    longest_pattern_sequences = ([])
    for index in range(0,len(patterns_frequency)-1):
        value = patterns_frequency[index]
        
        if all(val in patterns_frequency[index+1] for val in value[:-1]):
            continue
        
        if value in longest_pattern_sequences:
            continue

        longest_pattern_sequences.append(value)

    longest_pattern_sequences.append(patterns_frequency[-1])

    if(frequency_type == 'less'):
        longest_pattern_sequences = keep_only_less_frequent(longest_pattern_sequences)

    return longest_pattern_sequences

def read_api_calls_from_file(type):
    system_calls = []
    indexes = []
    file = open(f'./sequences/results/api_sequences_{type}.txt', 'r')
    for line in file:
        calls = line.split(sep=',')
        system_calls.append(calls)
        indexes.append(list(range(0,len(calls))))

    return system_calls,indexes

def keep_only_less_frequent(longest_pattern_sequences):
    less_frequent_sequences = []
    for sequence in longest_pattern_sequences:
        if(sequence[-1] <= 5):
            less_frequent_sequences.insert(0,sequence)

    return less_frequent_sequences

def write_file(type,min_frequency,longest_pattern_sequences,frequency_type="most"):
    try:
        with open(f'./sequences/results/{frequency_type}_frequent_sequences_{type}.txt', "w", encoding="utf-8") as file:
            file.write(f"min_frequency: {min_frequency} \n")
            file.write(f"number_sequences: {len(longest_pattern_sequences)} \n")
            file.write(f"{str(longest_pattern_sequences)}\n")
        file.close()
        print("Created file successful..")
    except Exception as ex:
        print("Error in writing training file." + str(ex))

type='benign' #ransom or benign - depends on the type used in the csv filename
min_frequency=52
frequency_type='most' # most or less

longest_pattern_sequences = get_sequence_with_less_frequence(type,min_frequency,frequency_type)
write_file(type,min_frequency,longest_pattern_sequences,frequency_type)
