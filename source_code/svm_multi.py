#Author: Megan Toinga
import logging
import time

# Importing the libraries
import pandas as pd
from numpy import mean
from sklearn.metrics import accuracy_score, precision_score
from sklearn.model_selection import train_test_split, KFold, cross_val_score
from sklearn.preprocessing import OneHotEncoder
from sklearn.svm import SVC
from sklearn.multiclass import OneVsRestClassifier

# Function definition to calculate accuracy of "Linear SVM".
# Input: size: Specifies size of n-gram.
# Input: is_dynamic: Specifies whether it is static or dynamic analysis.
# Output: List of accuracies of Linear SVM Analysis (consists of all n-grams and folds).
def linear_svm(size=3):
    logging.basicConfig(filename='./processing/reverse_engineering.log', level=logging.INFO)
    dataset = pd.read_csv('./processing/training/training_multiple_' + str(size) + '_gram.txt')
    # Taking first column of CSV as API sequence (separated with bar: '|')
    api_combination = dataset.iloc[:, 0].values
    
    is_malware = dataset.iloc[:, -1].values
    start_time = time.time()
    vec = OneHotEncoder()
    api_combination_encoded = vec.fit_transform(api_combination.reshape(-1, 1))
    X_train, X_test, y_train, y_test = train_test_split(api_combination_encoded, is_malware, test_size=0.20,
                                                        random_state=0)
    
    # One versus One
    
    print("-------- LINEAR Kernel ---------")
    start_time = time.time()
    linear = SVC(kernel='linear')
    print("Fitting svc")
    ovr = OneVsRestClassifier(linear)
    ovr.fit(X_train, y_train)
    print("Predicting svc with test values")
    linear_pred = ovr.predict(X_test)
    
    ac = round(accuracy_score(y_test, linear_pred) * 100, 6)
    print("Accuracy of SVM linear with %d grams: %f" % (size, ac))
    logging.info("Accuracy of SVM linear with %d grams: %f" % (size, ac))
    precision = round(precision_score(y_test, linear_pred,average='micro') * 100, 6)
    print("Precision of SVM linear with %d grams: %f" % (size, ac))
    exec_time = time.time() - start_time
    print("Execution Time: %f" % exec_time)
    logging.info("Execution Time: %f" % exec_time)
    
    print("-------- SIGMOID Kernel --------- Next")
    start_time = time.time()
    sigmoid = SVC(kernel='sigmoid', C=1, decision_function_shape='ovo')
    sigmoid.fit(X_train, y_train)    
    sigmoid_pred = sigmoid.predict(X_test)

    ac = round(accuracy_score(y_test, sigmoid_pred) * 100, 6)
    print("Accuracy of SVM sigmoid with %d grams: %f" % (size, ac))
    logging.info("Accuracy of SVM sigmoid with %d grams: %f" % (size, ac))
    precision = round(precision_score(y_test, sigmoid_pred,average='micro') * 100, 6)
    print("Precision of SVM sigmoid with %d grams: %f" % (size, ac))
    exec_time = time.time() - start_time
    print("Execution Time: %f" % exec_time)
    logging.info("Execution Time: %f" % exec_time)

linear_svm(size=10)